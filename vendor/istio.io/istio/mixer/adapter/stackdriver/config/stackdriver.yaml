# this config is created through command
# mixgen adapter -c $GOPATH/src/istio.io/istio/mixer/adapter/stackdriver/config/config.proto_descriptor -o $GOPATH/src/istio.io/istio/mixer/adapter/stackdriver/config -n stackdriver -t logentry -t tracespan -t metric
apiVersion: "config.istio.io/v1alpha2"
kind: adapter
metadata:
  name: stackdriver
  namespace: istio-system
spec:
  description: 
  session_based: true
  templates:
  - logentry
  - tracespan
  - metric
  config: 
---
