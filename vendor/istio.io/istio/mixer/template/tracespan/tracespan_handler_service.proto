// Copyright 2017 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// THIS FILE IS AUTOMATICALLY GENERATED BY MIXGEN.

syntax = "proto3";


// The `tracespan` template represents an individual span within a distributed trace.
// 
// Example config:
// 
// ```yaml
// apiVersion: "config.istio.io/v1alpha2"
// kind: tracespan
// metadata:
//   name: default
//   namespace: istio-system
// spec:
//   traceId: request.headers["x-b3-traceid"]
//   spanId: request.headers["x-b3-spanid"] | ""
//   parentSpanId: request.headers["x-b3-parentspanid"] | ""
//   spanName: request.path | "/"
//   startTime: request.time
//   endTime: response.time
//   clientSpan: (context.reporter.kind | "inbound") == "inbound"
//   rewriteClientSpanId: false
//   spanTags:
//     http.method: request.method | ""
//     http.status_code: response.code | 200
//     http.url: request.path | ""
//     request.size: request.size | 0
//     response.size: response.size | 0
//     source.principal: source.principal | ""
//     source.version: source.labels["version"] | ""
// ```
// 
// See also: [Distributed Tracing](https://istio.io/docs/tasks/telemetry/distributed-tracing/)
// for information on tracing within Istio.
//
// TraceSpan represents an individual span within a distributed trace.
// 
// When writing the configuration, the value for the fields associated with this template can either be a
// literal or an [expression](https://istio.io/docs/reference//config/policy-and-telemetry/expression-language/). Please note that if the datatype of a field is not istio.policy.v1beta1.Value,
// then the expression's [inferred type](https://istio.io/docs/reference//config/policy-and-telemetry/expression-language/#type-checking) must match the datatype of the field.
package tracespan;


import "gogoproto/gogo.proto";
import "mixer/adapter/model/v1beta1/extensions.proto";
import "google/protobuf/any.proto";
import "mixer/adapter/model/v1beta1/report.proto";
import "policy/v1beta1/type.proto";
import "policy/v1beta1/value_type.proto";

option (istio.mixer.adapter.model.v1beta1.template_variety) = TEMPLATE_VARIETY_REPORT;
option (istio.mixer.adapter.model.v1beta1.template_name) = "tracespan";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.equal_all) = false;
option (gogoproto.gostring_all) = false;

// HandleTraceSpanService is implemented by backends that wants to handle request-time 'tracespan' instances.
service HandleTraceSpanService {
    // HandleTraceSpan is called by Mixer at request-time to deliver 'tracespan' instances to the backend.
    rpc HandleTraceSpan(HandleTraceSpanRequest) returns (istio.mixer.adapter.model.v1beta1.ReportResult);
    
}

// Request message for HandleTraceSpan method.
message HandleTraceSpanRequest {

    // 'tracespan' instances.
    repeated InstanceMsg instances = 1;

    // Adapter specific handler configuration.
    //
    // Note: Backends can also implement [InfrastructureBackend][https://istio.io/docs/reference/config/mixer/istio.mixer.adapter.model.v1beta1.html#InfrastructureBackend]
    // service and therefore opt to receive handler configuration during session creation through [InfrastructureBackend.CreateSession][TODO: Link to this fragment]
    // call. In that case, adapter_config will have type_url as 'google.protobuf.Any.type_url' and would contain string
    // value of session_id (returned from InfrastructureBackend.CreateSession).
    google.protobuf.Any adapter_config = 2;

    // Id to dedupe identical requests from Mixer.
    string dedup_id = 3;
}





// Contains instance payload for 'tracespan' template. This is passed to infrastructure backends during request-time
// through HandleTraceSpanService.HandleTraceSpan.
message InstanceMsg {

    // Name of the instance as specified in configuration.
    string name = 72295727;
    
    // Trace ID is the unique identifier for a trace. All spans from the same
// trace share the same Trace ID.
// 
// Required.
    string trace_id = 1;
    
    // Span ID is the unique identifier for a span within a trace. It is assigned
// when the span is created.
// 
// Optional.
    string span_id = 2;
    
    // Parent Span ID is the unique identifier for a parent span of this span
// instance. If this is a root span, then this field MUST be empty.
// 
// Optional.
    string parent_span_id = 3;
    
    // Span name is a description of the span's operation.
// 
// For example, the name can be a qualified method name or a file name
// and a line number where the operation is called. A best practice is to use
// the same display name within an application and at the same call point.
// This makes it easier to correlate spans in different traces.
// 
// Required.
    string span_name = 4;
    
    // The start time of the span.
// 
// Required.
    istio.policy.v1beta1.TimeStamp start_time = 5;
    
    // The end time of the span.
// 
// Required.
    istio.policy.v1beta1.TimeStamp end_time = 6;
    
    // Span tags are a set of < key, value > pairs that provide metadata for the
// entire span. The values can be specified in the form of expressions.
// 
// Optional.
    map<string, istio.policy.v1beta1.Value> span_tags = 7;
    
    // HTTP status code used to set the span status. If unset or set to 0, the
// span status will be assumed to be successful.
    int64 httpStatusCode = 8;
    
    // client_span indicates the span kind. True for client spans and False or
// not provided for server spans. Using bool instead of enum is a temporary
// work around since mixer expression language does not yet support enum
// type.
// 
// Optional
    bool client_span = 9;
    
    // rewrite_client_span_id is used to indicate whether to create a new client
// span id to accommodate Zipkin shared span model. Some tracing systems like
// Stackdriver separates a RPC into client span and server span. To solve this
// incompatibility, deterministically rewriting both span id of client span and
// parent span id of server span to the same newly generated id.
// 
// Optional
    bool rewrite_client_span_id = 10;
    
    // Identifies the source (client side) of this span.
// Should usually be set to `source.workload.name`.
// 
// Optional.
    string source_name = 11;
    
    // Client IP address. Should usually be set to `source.ip`.
// 
// Optional.
    istio.policy.v1beta1.IPAddress source_ip = 12;
    
    // Identifies the destination (server side) of this span.
// Should usually be set to `destination.workload.name`.
// 
// Optional.
    string destination_name = 13;
    
    // Server IP address. Should usually be set to `destination.ip`.
// 
// Optional.
    istio.policy.v1beta1.IPAddress destination_ip = 14;
    
    // Request body size. Should usually be set to `request.size`.
// 
// Optional.
    int64 request_size = 15;
    
    // Total request size (headers and body).
// Should usually be set to `request.total_size`.
// 
// Optional.
    int64 request_total_size = 16;
    
    // Response body size. Should usually be set to `response.size`.
// 
// Optional.
    int64 response_size = 17;
    
    // Response total size (headers and body).
// Should usually be set to `response.total_size`.
// 
// Optional.
    int64 response_total_size = 18;
    
    // One of "http", "https", or "grpc" or any other value of
// the `api.protocol` attribute. Should usually be set to `api.protocol`.
// 
// Optional.
    string api_protocol = 19;
    
}

// Contains inferred type information about specific instance of 'tracespan' template. This is passed to
// infrastructure backends during configuration-time through [InfrastructureBackend.CreateSession][TODO: Link to this fragment].
message Type {
    
    // Span tags are a set of < key, value > pairs that provide metadata for the
// entire span. The values can be specified in the form of expressions.
// 
// Optional.
    map<string, istio.policy.v1beta1.ValueType> span_tags = 7;
    
}


// Represents instance configuration schema for 'tracespan' template.
message InstanceParam {
    
    // Trace ID is the unique identifier for a trace. All spans from the same
// trace share the same Trace ID.
// 
// Required.
    string trace_id = 1;
    
    // Span ID is the unique identifier for a span within a trace. It is assigned
// when the span is created.
// 
// Optional.
    string span_id = 2;
    
    // Parent Span ID is the unique identifier for a parent span of this span
// instance. If this is a root span, then this field MUST be empty.
// 
// Optional.
    string parent_span_id = 3;
    
    // Span name is a description of the span's operation.
// 
// For example, the name can be a qualified method name or a file name
// and a line number where the operation is called. A best practice is to use
// the same display name within an application and at the same call point.
// This makes it easier to correlate spans in different traces.
// 
// Required.
    string span_name = 4;
    
    // The start time of the span.
// 
// Required.
    string start_time = 5;
    
    // The end time of the span.
// 
// Required.
    string end_time = 6;
    
    // Span tags are a set of < key, value > pairs that provide metadata for the
// entire span. The values can be specified in the form of expressions.
// 
// Optional.
    map<string, string> span_tags = 7;
    
    // HTTP status code used to set the span status. If unset or set to 0, the
// span status will be assumed to be successful.
    string httpStatusCode = 8;
    
    // client_span indicates the span kind. True for client spans and False or
// not provided for server spans. Using bool instead of enum is a temporary
// work around since mixer expression language does not yet support enum
// type.
// 
// Optional
    string client_span = 9;
    
    // rewrite_client_span_id is used to indicate whether to create a new client
// span id to accommodate Zipkin shared span model. Some tracing systems like
// Stackdriver separates a RPC into client span and server span. To solve this
// incompatibility, deterministically rewriting both span id of client span and
// parent span id of server span to the same newly generated id.
// 
// Optional
    string rewrite_client_span_id = 10;
    
    // Identifies the source (client side) of this span.
// Should usually be set to `source.workload.name`.
// 
// Optional.
    string source_name = 11;
    
    // Client IP address. Should usually be set to `source.ip`.
// 
// Optional.
    string source_ip = 12;
    
    // Identifies the destination (server side) of this span.
// Should usually be set to `destination.workload.name`.
// 
// Optional.
    string destination_name = 13;
    
    // Server IP address. Should usually be set to `destination.ip`.
// 
// Optional.
    string destination_ip = 14;
    
    // Request body size. Should usually be set to `request.size`.
// 
// Optional.
    string request_size = 15;
    
    // Total request size (headers and body).
// Should usually be set to `request.total_size`.
// 
// Optional.
    string request_total_size = 16;
    
    // Response body size. Should usually be set to `response.size`.
// 
// Optional.
    string response_size = 17;
    
    // Response total size (headers and body).
// Should usually be set to `response.total_size`.
// 
// Optional.
    string response_total_size = 18;
    
    // One of "http", "https", or "grpc" or any other value of
// the `api.protocol` attribute. Should usually be set to `api.protocol`.
// 
// Optional.
    string api_protocol = 19;
    
}

