// Copyright 2017 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// THIS FILE IS AUTOMATICALLY GENERATED BY MIXGEN.

syntax = "proto3";


// The `edge` template represents an edge in the mesh graph.
//
// The `edge` template represents an edge in the mesh graph
// 
// When writing the configuration, the value for the fields associated
// with this template can either be a literal or an
// [expression](https://istio.io/docs/reference/config/policy-and-telemetry/expression-language/). Please
// note that if the datatype of a field is not
// istio.mixer.adapter.model.v1beta1.Value, then the expression's
// [inferred type](https://istio.io/docs/reference/config/policy-and-telemetry/expression-language/#type-checking)
// must match the datatype of the field.
// 
// Example config:
// ```yaml
// apiVersion: "config.istio.io/v1alpha2"
// kind: edge
// metadata:
//   name: default
//   namespace: istio-system
// spec:
//   timestamp: request.time
//   sourceUid: source.uid | "Unknown"
//   sourceOwner: source.owner | "Unknown"
//   sourceWorkloadName: source.workload.name | "Unknown"
//   sourceWorkloadNamespace: source.workload.namespace | "Unknown"
//   destinationUid: destination.uid | "Unknown"
//   destinationOwner: destination.owner | "Unknown"
//   destinationWorkloadName: destination.workload.name | "Unknown"
//   destinationWorkloadNamespace: destination.workload.namespace | "Unknown"
//   destinationServiceName: destination.service.name | "Unknown"
//   destinationServiceNamespace: destination.service.namespace | "Unknown"
//   apiProtocol: api.protocol | "Unknown"
//   contextProtocol: context.protocol | "Unknown"
// ```
package edge;


import "gogoproto/gogo.proto";
import "mixer/adapter/model/v1beta1/extensions.proto";
import "google/protobuf/any.proto";
import "mixer/adapter/model/v1beta1/report.proto";
import "policy/v1beta1/type.proto";

option (istio.mixer.adapter.model.v1beta1.template_variety) = TEMPLATE_VARIETY_REPORT;
option (istio.mixer.adapter.model.v1beta1.template_name) = "edge";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.equal_all) = false;
option (gogoproto.gostring_all) = false;

// HandleEdgeService is implemented by backends that wants to handle request-time 'edge' instances.
service HandleEdgeService {
    // HandleEdge is called by Mixer at request-time to deliver 'edge' instances to the backend.
    rpc HandleEdge(HandleEdgeRequest) returns (istio.mixer.adapter.model.v1beta1.ReportResult);
    
}

// Request message for HandleEdge method.
message HandleEdgeRequest {

    // 'edge' instances.
    repeated InstanceMsg instances = 1;

    // Adapter specific handler configuration.
    //
    // Note: Backends can also implement [InfrastructureBackend][https://istio.io/docs/reference/config/mixer/istio.mixer.adapter.model.v1beta1.html#InfrastructureBackend]
    // service and therefore opt to receive handler configuration during session creation through [InfrastructureBackend.CreateSession][TODO: Link to this fragment]
    // call. In that case, adapter_config will have type_url as 'google.protobuf.Any.type_url' and would contain string
    // value of session_id (returned from InfrastructureBackend.CreateSession).
    google.protobuf.Any adapter_config = 2;

    // Id to dedupe identical requests from Mixer.
    string dedup_id = 3;
}





// Contains instance payload for 'edge' template. This is passed to infrastructure backends during request-time
// through HandleEdgeService.HandleEdge.
message InstanceMsg {

    // Name of the instance as specified in configuration.
    string name = 72295727;
    
    // Timestamp of the edge
    istio.policy.v1beta1.TimeStamp timestamp = 1;
    
    // Namespace of the source workload
    string source_workload_namespace = 10;
    
    // Name of the source workload
    string source_workload_name = 11;
    
    // Owner of the source workload (often k8s deployment)
    string source_owner = 12;
    
    // UID of the source workload
    string source_uid = 13;
    
    // Namespace of the destination workload
    string destination_workload_namespace = 20;
    
    // Name of the destination workload
    string destination_workload_name = 21;
    
    // Owner of the destination workload (often k8s deployment)
    string destination_owner = 22;
    
    // UID of the destination workload
    string destination_uid = 23;
    
    // Namespace of the destination Service
    string destination_service_namespace = 24;
    
    // Name of the destination Service
    string destination_service_name = 25;
    
    // Protocol used for communication (http, tcp)
    string context_protocol = 30;
    
    // The protocol type of the API call (http, https, grpc)
    string api_protocol = 31;
    
}

// Contains inferred type information about specific instance of 'edge' template. This is passed to
// infrastructure backends during configuration-time through [InfrastructureBackend.CreateSession][TODO: Link to this fragment].
message Type {
    
}


// Represents instance configuration schema for 'edge' template.
message InstanceParam {
    
    // Timestamp of the edge
    string timestamp = 1;
    
    // Namespace of the source workload
    string source_workload_namespace = 10;
    
    // Name of the source workload
    string source_workload_name = 11;
    
    // Owner of the source workload (often k8s deployment)
    string source_owner = 12;
    
    // UID of the source workload
    string source_uid = 13;
    
    // Namespace of the destination workload
    string destination_workload_namespace = 20;
    
    // Name of the destination workload
    string destination_workload_name = 21;
    
    // Owner of the destination workload (often k8s deployment)
    string destination_owner = 22;
    
    // UID of the destination workload
    string destination_uid = 23;
    
    // Namespace of the destination Service
    string destination_service_namespace = 24;
    
    // Name of the destination Service
    string destination_service_name = 25;
    
    // Protocol used for communication (http, tcp)
    string context_protocol = 30;
    
    // The protocol type of the API call (http, https, grpc)
    string api_protocol = 31;
    
}

