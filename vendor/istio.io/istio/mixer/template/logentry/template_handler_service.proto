// Copyright 2017 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// THIS FILE IS AUTOMATICALLY GENERATED BY MIXGEN.

syntax = "proto3";


// The `logentry` template represents an individual entry within a log.
// 
// Example config:
// 
// ```yaml
// apiVersion: "config.istio.io/v1alpha2"
// kind: logentry
// metadata:
//   name: accesslog
//   namespace: istio-system
// spec:
//   severity: '"Default"'
//   timestamp: request.time
//   variables:
//     sourceIp: source.ip | ip("0.0.0.0")
//     destinationIp: destination.ip | ip("0.0.0.0")
//     sourceUser: source.principal | ""
//     method: request.method | ""
//     url: request.path | ""
//     protocol: request.scheme | "http"
//     responseCode: response.code | 0
//     responseSize: response.size | 0
//     requestSize: request.size | 0
//     latency: response.duration | "0ms"
//   monitored_resource_type: '"UNSPECIFIED"'
// ```
//
// The `logentry` template represents an individual entry within a log.
// 
// When writing the configuration, the value for the fields associated with this template can either be a
// literal or an [expression](https://istio.io/docs/reference//config/policy-and-telemetry/expression-language/). Please note that if the datatype of a field is not istio.policy.v1beta1.Value,
// then the expression's [inferred type](https://istio.io/docs/reference//config/policy-and-telemetry/expression-language/#type-checking) must match the datatype of the field.
package logentry;


import "gogoproto/gogo.proto";
import "mixer/adapter/model/v1beta1/extensions.proto";
import "google/protobuf/any.proto";
import "mixer/adapter/model/v1beta1/report.proto";
import "policy/v1beta1/value_type.proto";
import "policy/v1beta1/type.proto";

option (istio.mixer.adapter.model.v1beta1.template_variety) = TEMPLATE_VARIETY_REPORT;
option (istio.mixer.adapter.model.v1beta1.template_name) = "logentry";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.equal_all) = false;
option (gogoproto.gostring_all) = false;

// HandleLogEntryService is implemented by backends that wants to handle request-time 'logentry' instances.
service HandleLogEntryService {
    // HandleLogEntry is called by Mixer at request-time to deliver 'logentry' instances to the backend.
    rpc HandleLogEntry(HandleLogEntryRequest) returns (istio.mixer.adapter.model.v1beta1.ReportResult);
    
}

// Request message for HandleLogEntry method.
message HandleLogEntryRequest {

    // 'logentry' instances.
    repeated InstanceMsg instances = 1;

    // Adapter specific handler configuration.
    //
    // Note: Backends can also implement [InfrastructureBackend][https://istio.io/docs/reference/config/mixer/istio.mixer.adapter.model.v1beta1.html#InfrastructureBackend]
    // service and therefore opt to receive handler configuration during session creation through [InfrastructureBackend.CreateSession][TODO: Link to this fragment]
    // call. In that case, adapter_config will have type_url as 'google.protobuf.Any.type_url' and would contain string
    // value of session_id (returned from InfrastructureBackend.CreateSession).
    google.protobuf.Any adapter_config = 2;

    // Id to dedupe identical requests from Mixer.
    string dedup_id = 3;
}





// Contains instance payload for 'logentry' template. This is passed to infrastructure backends during request-time
// through HandleLogEntryService.HandleLogEntry.
message InstanceMsg {

    // Name of the instance as specified in configuration.
    string name = 72295727;
    
    // Variables that are delivered for each log entry.
    map<string, istio.policy.v1beta1.Value> variables = 1;
    
    // Timestamp is the time value for the log entry
    istio.policy.v1beta1.TimeStamp timestamp = 2;
    
    // Severity indicates the importance of the log entry.
    string severity = 3;
    
    // Optional. An expression to compute the type of the monitored resource this log entry is being recorded on.
// If the logging backend supports monitored resources, these fields are used to populate that resource.
// Otherwise these fields will be ignored by the adapter.
    string monitored_resource_type = 4;
    
    // Optional. A set of expressions that will form the dimensions of the monitored resource this log entry is being
// recorded on. If the logging backend supports monitored resources, these fields are used to populate that resource.
// Otherwise these fields will be ignored by the adapter.
    map<string, istio.policy.v1beta1.Value> monitored_resource_dimensions = 5;
    
}

// Contains inferred type information about specific instance of 'logentry' template. This is passed to
// infrastructure backends during configuration-time through [InfrastructureBackend.CreateSession][TODO: Link to this fragment].
message Type {
    
    // Variables that are delivered for each log entry.
    map<string, istio.policy.v1beta1.ValueType> variables = 1;
    
    // Optional. A set of expressions that will form the dimensions of the monitored resource this log entry is being
// recorded on. If the logging backend supports monitored resources, these fields are used to populate that resource.
// Otherwise these fields will be ignored by the adapter.
    map<string, istio.policy.v1beta1.ValueType> monitored_resource_dimensions = 5;
    
}


// Represents instance configuration schema for 'logentry' template.
message InstanceParam {
    
    // Variables that are delivered for each log entry.
    map<string, string> variables = 1;
    
    // Timestamp is the time value for the log entry
    string timestamp = 2;
    
    // Severity indicates the importance of the log entry.
    string severity = 3;
    
    // Optional. An expression to compute the type of the monitored resource this log entry is being recorded on.
// If the logging backend supports monitored resources, these fields are used to populate that resource.
// Otherwise these fields will be ignored by the adapter.
    string monitored_resource_type = 4;
    
    // Optional. A set of expressions that will form the dimensions of the monitored resource this log entry is being
// recorded on. If the logging backend supports monitored resources, these fields are used to populate that resource.
// Otherwise these fields will be ignored by the adapter.
    map<string, string> monitored_resource_dimensions = 5;
    
}

