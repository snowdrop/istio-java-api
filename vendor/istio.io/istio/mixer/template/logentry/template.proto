// Copyright 2017 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// $title: Log Entry
// $description: A template that represents a single runtime log entry.
// $location: https://istio.io/docs/reference/config/policy-and-telemetry/templates/logentry.html
// $aliases:
// $  - /docs/reference/config/template/logentry.html

// The `logentry` template represents an individual entry within a log.
//
// Example config:
//
// ```yaml
// apiVersion: "config.istio.io/v1alpha2"
// kind: logentry
// metadata:
//   name: accesslog
//   namespace: istio-system
// spec:
//   severity: '"Default"'
//   timestamp: request.time
//   variables:
//     sourceIp: source.ip | ip("0.0.0.0")
//     destinationIp: destination.ip | ip("0.0.0.0")
//     sourceUser: source.principal | ""
//     method: request.method | ""
//     url: request.path | ""
//     protocol: request.scheme | "http"
//     responseCode: response.code | 0
//     responseSize: response.size | 0
//     requestSize: request.size | 0
//     latency: response.duration | "0ms"
//   monitored_resource_type: '"UNSPECIFIED"'
// ```
package logEntry;

import "policy/v1beta1/type.proto";
import "mixer/adapter/model/v1beta1/extensions.proto";

option (istio.mixer.adapter.model.v1beta1.template_variety) = TEMPLATE_VARIETY_REPORT;

// The `logentry` template represents an individual entry within a log.
//
// When writing the configuration, the value for the fields associated with this template can either be a
// literal or an [expression](https://istio.io/docs/reference//config/policy-and-telemetry/expression-language/). Please note that if the datatype of a field is not istio.policy.v1beta1.Value,
// then the expression's [inferred type](https://istio.io/docs/reference//config/policy-and-telemetry/expression-language/#type-checking) must match the datatype of the field.
message Template {
    // Variables that are delivered for each log entry.
    map<string, istio.policy.v1beta1.Value> variables = 1;

    // Timestamp is the time value for the log entry
    istio.policy.v1beta1.TimeStamp timestamp = 2;

    // Severity indicates the importance of the log entry.
    string severity = 3;

    // Optional. An expression to compute the type of the monitored resource this log entry is being recorded on.
    // If the logging backend supports monitored resources, these fields are used to populate that resource.
    // Otherwise these fields will be ignored by the adapter.
    string monitored_resource_type = 4;

    // Optional. A set of expressions that will form the dimensions of the monitored resource this log entry is being
    // recorded on. If the logging backend supports monitored resources, these fields are used to populate that resource.
    // Otherwise these fields will be ignored by the adapter.
    map<string, istio.policy.v1beta1.Value> monitored_resource_dimensions = 5;
}
