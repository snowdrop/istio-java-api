/**
 * Copyright (C) 2015 Red Hat, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package me.snowdrop.istio.client.internal.handler;

import io.fabric8.kubernetes.client.Config;
import io.fabric8.kubernetes.client.ResourceHandler;
import io.fabric8.kubernetes.client.Watch;
import io.fabric8.kubernetes.client.Watcher;

import okhttp3.OkHttpClient;

#set ($version = "unknown")
#set ($annotations = $model.annotations)
#foreach ($annotation in $annotations)
#if ($annotation.getClassRef().getName().equals("IstioApiVersion"))
#set ($version = $annotation.getParameters().get("value"))
#set ($apiGroup = $version.split("/")[0])
#set ($apiVersion = $version.split("/")[1])
#end
#end

import me.snowdrop.istio.client.internal.operation.${model.name}OperationImpl;

import ${model.fullyQualifiedName};
import ${model.fullyQualifiedName}Builder;

import java.util.TreeMap;
import java.util.concurrent.TimeUnit;

public class ${model.name}Handler implements ResourceHandler<${model.name}, ${model.name}Builder> {
  @Override
  public String getKind() {
    return ${model.name}.class.getSimpleName();
  }

  @Override
  public ${model.name} create(OkHttpClient client, Config config, String namespace, ${model.name} item) {
    return new ${model.name}OperationImpl(client, config, "$apiGroup", "$apiVersion", namespace, null, true, item, null, false, -1, new TreeMap<String, String>(), new TreeMap<String, String>(), new TreeMap<String, String[]>(), new TreeMap<String, String[]>(), new TreeMap<String, String>()).create();
  }

  @Override
  public ${model.name} replace(OkHttpClient client, Config config, String namespace, ${model.name} item) {
    return new ${model.name}OperationImpl(client, config,"$apiGroup", "$apiVersion", namespace, null, true, item, null, true, -1, new TreeMap<String, String>(), new TreeMap<String, String>(), new TreeMap<String, String[]>(), new TreeMap<String, String[]>(), new TreeMap<String, String>()).replace(item);
  }

  @Override
  public ${model.name} reload(OkHttpClient client, Config config, String namespace, ${model.name} item) {
    return new ${model.name}OperationImpl(client, config, "$apiGroup", "$apiVersion", namespace, null, true, item, null, false, -1, new TreeMap<String, String>(), new TreeMap<String, String>(), new TreeMap<String, String[]>(), new TreeMap<String, String[]>(), new TreeMap<String, String>()).fromServer().get();
  }

  @Override
  public ${model.name}Builder edit(${model.name} item) {
    return new ${model.name}Builder(item);
  }

  @Override
  public Boolean delete(OkHttpClient client, Config config, String namespace, ${model.name} item) {
    return new ${model.name}OperationImpl(client, config,"$apiGroup", "$apiVersion", namespace, null, true, item, null, false, -1, new TreeMap<String, String>(), new TreeMap<String, String>(), new TreeMap<String, String[]>(), new TreeMap<String, String[]>(), new TreeMap<String, String>()).delete(item);
  }

  @Override
  public Watch watch(OkHttpClient client, Config config, String namespace, ${model.name} item, Watcher<${model.name}> watcher) {
    return new ${model.name}OperationImpl(client, config, "$apiGroup", "$apiVersion", namespace, null, true, item, null, false, -1, new TreeMap<String, String>(), new TreeMap<String, String>(), new TreeMap<String, String[]>(), new TreeMap<String, String[]>(), new TreeMap<String, String>()).watch(watcher);
  }

  @Override
  public Watch watch(OkHttpClient client, Config config, String namespace, ${model.name} item, String resourceVersion, Watcher<${model.name}> watcher) {
    return new ${model.name}OperationImpl(client, config,"$apiGroup", "$apiVersion", namespace, null, true, item, null, false, -1, new TreeMap<String, String>(), new TreeMap<String, String>(), new TreeMap<String, String[]>(), new TreeMap<String, String[]>(), new TreeMap<String, String>()).watch(resourceVersion, watcher);
  }

  @Override
  public ${model.name} waitUntilReady(OkHttpClient client, Config config, String namespace, ${model.name} item, long amount, TimeUnit timeUnit) throws InterruptedException {
    return new ${model.name}OperationImpl(client, config, "$apiGroup", "$apiVersion", namespace, null, true, item, null, false, -1, new TreeMap<String, String>(), new TreeMap<String, String>(), new TreeMap<String, String[]>(), new TreeMap<String, String[]>(), new TreeMap<String, String>()).waitUntilReady(amount, timeUnit);
  }
}
