#set ($pkg = $model.packageName)
#set ($pkgParts = $pkg.split("\."))
#set ($pkgVersionIndex = $pkgParts.size() - 1)
#set ($pkgGroupIndex = $pkgParts.size() - 2)
#set ($pkgVersion = $pkgParts[$pkgVersionIndex])
#set ($pkgGroup = $pkgParts[$pkgGroupIndex])
#set ($package = "me.snowdrop.istio.client.internal.handler.${pkgGroup}.${pkgVersion}")

package $package;

import io.fabric8.kubernetes.api.model.DeletionPropagation;
import io.fabric8.kubernetes.api.model.ListOptions;
import io.fabric8.kubernetes.client.Config;
import io.fabric8.kubernetes.client.ResourceHandler;
import io.fabric8.kubernetes.client.Watch;
import io.fabric8.kubernetes.client.Watcher;

import okhttp3.OkHttpClient;

#set ($version = "unknown")
#set ($annotations = $model.annotations)
#foreach ($annotation in $annotations)
#if ($annotation.getClassRef().getName().equals("IstioApiVersion"))
#set ($version = $annotation.getParameters().get("value"))
#set ($apiGroup = $version.split("/")[0])
#set ($apiVersion = $version.split("/")[1])
#end
#end

import me.snowdrop.istio.client.internal.operation.${pkgGroup}.${pkgVersion}.${model.name}OperationImpl;

import ${model.fullyQualifiedName};
import ${model.fullyQualifiedName}Builder;

import java.util.TreeMap;
import java.util.concurrent.TimeUnit;
import java.util.function.Predicate;

public class ${model.name}Handler implements ResourceHandler<${model.name}, ${model.name}Builder> {

@Override
public ${model.name}Builder edit(${model.name} item) {
return new ${model.name}Builder(item);
}


@Override
public ${model.name} waitUntilCondition(OkHttpClient client, Config config, String namespace, ${model.name} item, Predicate<${model.name}> condition, long amount, TimeUnit timeUnit) throws InterruptedException {
    return new ${model.name}OperationImpl(client, config).withItem(item).inNamespace(namespace).withName(item.getMetadata().getName()).waitUntilCondition(condition, amount, timeUnit);
  }
}
