#set ($pkg = $model.packageName)
#set ($pkgParts = $pkg.split("\."))
#set ($pkgVersionIndex = $pkgParts.size() - 1)
#set ($pkgGroupIndex = $pkgParts.size() - 2)
#set ($pkgVersion = $pkgParts[$pkgVersionIndex])
#set ($pkgGroup = $pkgParts[$pkgGroupIndex])
#set ($package = "me.snowdrop.istio.client.internal.operation.${pkgGroup}.${pkgVersion}")

package $package;

import io.fabric8.kubernetes.client.Config;
import io.fabric8.kubernetes.client.dsl.Resource;
import io.fabric8.kubernetes.client.dsl.base.HasMetadataOperation;
import io.fabric8.kubernetes.client.dsl.NonNamespaceOperation;
import io.fabric8.kubernetes.client.dsl.base.OperationContext;

import okhttp3.OkHttpClient;

import ${model.packageName}.${model.name};
import ${model.packageName}.${model.name}List;

import java.util.Map;
import java.util.TreeMap;

#set ($version = "unknown")
#set ($annotations = $model.annotations)
#foreach ($annotation in $annotations)
#if ($annotation.getClassRef().getName().equals("IstioApiVersion"))
#set ($version = $annotation.getParameters().get("value"))
#set ($apiGroup = $version.split("/")[0])
#set ($apiVersion = $version.split("/")[1])
#elseif ($annotation.getClassRef().getName().equals("IstioKind"))
#set ($plural = $annotation.getParameters().get("plural"))
#end
#end

public class ${model.name}OperationImpl extends HasMetadataOperation<${model.name}, ${model.name}List, Resource<${model.name}>> {

  public ${model.name}OperationImpl(OkHttpClient client, Config config) {
    this(new OperationContext().withOkhttpClient(client).withConfig(config));
  }

  public ${model.name}OperationImpl(OperationContext context) {
    super(context.withApiGroupName("$apiGroup")
      .withApiGroupVersion("$apiVersion")
      .withPlural("$plural"), ${model.name}.class, ${model.name}List.class);
}

  public ${model.name}OperationImpl newInstance(OperationContext context) {
    return new ${model.name}OperationImpl(context);
  }
}
